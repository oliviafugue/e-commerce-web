{"ast":null,"code":"//// a place to store all firebase related functions ////\n\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCBAXURrkLZ90ZYYW4vc9MRctQXDiEFFQw\",\n  authDomain: \"corwn-ecommerce-db.firebaseapp.com\",\n  projectId: \"corwn-ecommerce-db\",\n  storageBucket: \"corwn-ecommerce-db.appspot.com\",\n  messagingSenderId: \"764195936789\",\n  appId: \"1:764195936789:web:c888eb61daf5485f234c1c\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// setup Google provider - each app can have more than one provider\nconst provider = new GoogleAuthProvider(); //new instance\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n// setup auth - each app can only has one authentication method\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\n\n// setup database\nexport const db = getFirestore();\n\n// create document in database\nexport const createUserDocumentFromAuth = async (userAuth, additionalInfo) => {\n  if (!userAuth) return;\n  // create reference - a location in database\n  const userDocRef = doc(db, 'users', userAuth.uid); //三个param: database, collection name, special id of the doc\n\n  // use doc reference to read doc\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists()); //return false; collection里还没有这个document\n\n  //if user data does NOT exist - set it up in database-setDoc\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  //if user exists\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithRedirect","signInWithPopup","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInfo","userDocRef","uid","userSnapshot","console","log","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser"],"sources":["/Users/olivia23/Downloads/React/e-commerce-web/src/utilities/firebase/firebase.jsx"],"sourcesContent":["//// a place to store all firebase related functions ////\n\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCBAXURrkLZ90ZYYW4vc9MRctQXDiEFFQw\",\n  authDomain: \"corwn-ecommerce-db.firebaseapp.com\",\n  projectId: \"corwn-ecommerce-db\",\n  storageBucket: \"corwn-ecommerce-db.appspot.com\",\n  messagingSenderId: \"764195936789\",\n  appId: \"1:764195936789:web:c888eb61daf5485f234c1c\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// setup Google provider - each app can have more than one provider\nconst provider = new GoogleAuthProvider(); //new instance\nprovider.setCustomParameters({\n    prompt: 'select_account'\n});\n\n// setup auth - each app can only has one authentication method\nexport const auth = getAuth(); \nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider)\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider)\n\n// setup database\nexport const db = getFirestore();\n\n// create document in database\nexport const createUserDocumentFromAuth = async (userAuth, additionalInfo) => {\n  if (!userAuth) return;\n  // create reference - a location in database\n  const userDocRef = doc(db, 'users', userAuth.uid) //三个param: database, collection name, special id of the doc\n\n  // use doc reference to read doc\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists()) //return false; collection里还没有这个document\n\n   //if user data does NOT exist - set it up in database-setDoc\n   if(!userSnapshot.exists()) {\n     const { displayName, email } = userAuth;\n     const createdAt = new Date();\n\n     try {\n       await setDoc(userDocRef, {displayName, email, createdAt, ...additionalInfo});\n     } catch (error) {\n       console.log('error creating the user', error.message)\n     }\n   }\n\n   //if user exists\n   return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => await signOut(auth);"],"mappings":"AAAA;;AAEA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,kBAAkB,EAAEC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,8BAA8B,EAAEC,0BAA0B,EAAEC,OAAO,QAAQ,eAAe;AACrK,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAGtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,oCAAoC;EAChDC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGnB,aAAa,CAACY,cAAc,CAAC;;AAEzC;AACA,MAAMQ,QAAQ,GAAG,IAAInB,kBAAkB,EAAE,CAAC,CAAC;AAC3CmB,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,IAAI,GAAGrB,OAAO,EAAE;AAC7B,OAAO,MAAMsB,qBAAqB,GAAG,MAAMpB,eAAe,CAACmB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAG,MAAMtB,kBAAkB,CAACoB,IAAI,EAAEH,QAAQ,CAAC;;AAEhF;AACA,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;;AAEhC;AACA,OAAO,MAAMmB,0BAA0B,GAAG,OAAOC,QAAQ,EAAEC,cAAc,KAAK;EAC5E,IAAI,CAACD,QAAQ,EAAE;EACf;EACA,MAAME,UAAU,GAAGrB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACG,GAAG,CAAC,EAAC;;EAElD;EACA,MAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAU,CAAC;EAC7CG,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;EACzBC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,MAAM,EAAE,CAAC,EAAC;;EAElC;EACA,IAAG,CAACH,YAAY,CAACG,MAAM,EAAE,EAAE;IACzB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGT,QAAQ;IACvC,MAAMU,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACF,MAAM5B,MAAM,CAACmB,UAAU,EAAE;QAACM,WAAW;QAAEC,KAAK;QAAEC,SAAS;QAAE,GAAGT;MAAc,CAAC,CAAC;IAC9E,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,KAAK,CAACC,OAAO,CAAC;IACvD;EACF;;EAEA;EACA,OAAOX,UAAU;AACpB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,OAAOL,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EACzB,OAAO,MAAMtC,8BAA8B,CAACkB,IAAI,EAAEc,KAAK,EAAEM,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,kCAAkC,GAAG,OAAOP,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EACzB,OAAO,MAAMrC,0BAA0B,CAACiB,IAAI,EAAEc,KAAK,EAAEM,QAAQ,CAAC;AAChE,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,YAAY,MAAMtC,OAAO,CAACgB,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}