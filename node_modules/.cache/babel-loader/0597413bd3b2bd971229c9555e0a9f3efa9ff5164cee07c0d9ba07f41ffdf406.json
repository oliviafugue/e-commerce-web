{"ast":null,"code":"import { create } from \"combined-stream\";\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCBAXURrkLZ90ZYYW4vc9MRctQXDiEFFQw\",\n  authDomain: \"corwn-ecommerce-db.firebaseapp.com\",\n  projectId: \"corwn-ecommerce-db\",\n  storageBucket: \"corwn-ecommerce-db.appspot.com\",\n  messagingSenderId: \"764195936789\",\n  appId: \"1:764195936789:web:c888eb61daf5485f234c1c\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n//new instance, each app can have more than one provider\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n//each app can only has one authentication method, 这里只是一个function，没有new\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  //create一个reference-location for the user in database\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot); //a special instance created ?\n  console.log(userSnapshot.exists()); //return false; collection里还没有这个document\n\n  //if user data does NOT exist, set it up in database-setDoc\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  //if user exists\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  const userDocRef = doc(db, 'users', email);\n  const createdAt = new Date();\n  try {\n    await setDoc(userDocRef, email);\n  } catch (error) {\n    console.log('error creating the user', error.message);\n  }\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["create","initializeApp","GoogleAuthProvider","getAuth","signInWithRedirect","signInWithPopup","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/olivia23/Downloads/React/e-commerce-web/src/utilities/firebase/firebase.jsx"],"sourcesContent":["import { create } from \"combined-stream\";\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCBAXURrkLZ90ZYYW4vc9MRctQXDiEFFQw\",\n  authDomain: \"corwn-ecommerce-db.firebaseapp.com\",\n  projectId: \"corwn-ecommerce-db\",\n  storageBucket: \"corwn-ecommerce-db.appspot.com\",\n  messagingSenderId: \"764195936789\",\n  appId: \"1:764195936789:web:c888eb61daf5485f234c1c\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n//new instance, each app can have more than one provider\nconst provider = new GoogleAuthProvider();\n\n\nprovider.setCustomParameters({\n    prompt: 'select_account'\n})\n\n//each app can only has one authentication method, 这里只是一个function，没有new\nexport const auth = getAuth(); \nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider)\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider)\n\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  if (!userAuth) return;\n  //create一个reference-location for the user in database\n  const userDocRef = doc(db, 'users', userAuth.uid)\n  \n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot); //a special instance created ?\n  console.log(userSnapshot.exists()) //return false; collection里还没有这个document\n\n   //if user data does NOT exist, set it up in database-setDoc\n   if(!userSnapshot.exists()) {\n     const { displayName, email } = userAuth;\n     const createdAt = new Date();\n\n     try {\n       await setDoc(userDocRef, {displayName, email, createdAt});\n     } catch (error) {\n       console.log('error creating the user', error.message)\n     }\n   }\n\n   //if user exists\n   return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  \n  const userDocRef = doc(db, 'users', email)\n  const createdAt = new Date();\n\n  try {\n    await setDoc(userDocRef, email)\n  } catch (error) {\n    console.log('error creating the user', error.message);\n  }\n\n   return await createUserWithEmailAndPassword(auth, email, password);\n }"],"mappings":"AAAA,SAASA,MAAM,QAAQ,iBAAiB;AACxC,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,kBAAkB,EAAEC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,8BAA8B,QAAQ,eAAe;AAChI,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAGtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,oCAAoC;EAChDC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGjB,aAAa,CAACU,cAAc,CAAC;;AAEzC;AACA,MAAMQ,QAAQ,GAAG,IAAIjB,kBAAkB,EAAE;AAGzCiB,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAAE;AAC7B,OAAO,MAAMoB,qBAAqB,GAAG,MAAMlB,eAAe,CAACiB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAG,MAAMpB,kBAAkB,CAACkB,IAAI,EAAEH,QAAQ,CAAC;AAGhF,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,IAAI,CAACA,QAAQ,EAAE;EACf;EACA,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC,CAAC,CAAC;EAC3BF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,EAAE,CAAC,EAAC;;EAElC;EACA,IAAG,CAACD,YAAY,CAACC,MAAM,EAAE,EAAE;IACzB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGR,QAAQ;IACvC,MAAMS,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACF,MAAM3B,MAAM,CAACkB,UAAU,EAAE;QAACM,WAAW;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;IACvD;EACF;;EAEA;EACA,OAAOX,UAAU;AACpB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,OAAOL,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EAEzB,MAAMb,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEU,KAAK,CAAC;EAC1C,MAAMC,SAAS,GAAG,IAAIC,IAAI,EAAE;EAE5B,IAAI;IACF,MAAM3B,MAAM,CAACkB,UAAU,EAAEO,KAAK,CAAC;EACjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;EACvD;EAEC,OAAO,MAAMjC,8BAA8B,CAACgB,IAAI,EAAEa,KAAK,EAAEM,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}